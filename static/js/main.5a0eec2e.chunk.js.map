{"version":3,"sources":["components/Td.js","components/Tr.js","components/Button.js","components/Modal.js","App.js","serviceWorker.js","index.js"],"names":["StyledTd","styled","td","props","mouseEnter","Td","rowNum","cellNum","value","onClick","useState","setMouseEnter","onMouseOver","onMouseOut","StyledTr","tr","Tr","className","map","index","key","StyledButton","span","Button","children","ModalBackground","div","open","ModalContents","Modal","closeModal","style","textAlign","timer","StyledTable","table","StyledDiv","init","randomNumArr","getRandomNumArr","Array","fill","splice","i","randomNum","Math","floor","random","isExist","push","number","arr","filter","length","App","array","setArray","isStart","setIsStart","setOpen","timerRef","useRef","num","row","col","newArr","slice","isClear","join","clearInterval","alert","end","current","innerText","ref","startTime","Date","getTime","getElapsedTime","nowTime","newTime","minute","getMinutes","second","getSeconds","addZero","setInterval","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5a0eec2e.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledTd = styled.td`\r\n  border: 1px solid;\r\n  padding: 40px;\r\n  font-size: 30px;\r\n  cursor: pointer;\r\n  background-color: ${props => (props.mouseEnter ? \"#e0e0e0\" : \"white\")};\r\n`;\r\n\r\nconst Td = ({ rowNum, cellNum, value, onClick }) => {\r\n  const [mouseEnter, setMouseEnter] = useState(false);\r\n\r\n  //20200316, LDH, useRef -> styled-components 방식으로 변경\r\n  // const tdRef = useRef();\r\n  const onMouseEnter = () => {\r\n    // tdRef.current.style.backgroundColor = \"#e0e0e0\";\r\n    setMouseEnter(true);\r\n  };\r\n\r\n  const onMouseLeave = () => {\r\n    // tdRef.current.style.backgroundColor = \"white\";\r\n    setMouseEnter(false);\r\n  };\r\n\r\n  const clickHandler = () => {\r\n    onClick(value, rowNum, cellNum);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <StyledTd\r\n        // ref={tdRef}\r\n        mouseEnter={mouseEnter}\r\n        onMouseOver={onMouseEnter}\r\n        onMouseOut={onMouseLeave}\r\n        onClick={clickHandler}\r\n      >\r\n        {value}\r\n      </StyledTd>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Td;\r\n","import React from \"react\";\r\nimport Td from \"./Td\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledTr = styled.tr`\r\n  border: 1px solid;\r\n  padding: 20px;\r\n`;\r\n\r\nconst Tr = ({ rowNum, value, onClick }) => {\r\n  const renderTd = arr => {\r\n    return arr.map((value, index) => (\r\n      <Td\r\n        key={index}\r\n        onClick={onClick}\r\n        rowNum={rowNum}\r\n        cellNum={index}\r\n        value={value}\r\n      ></Td>\r\n    ));\r\n  };\r\n\r\n  return <StyledTr className=\"slide_tr\">{renderTd(value)}</StyledTr>;\r\n};\r\n\r\nexport default Tr;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledButton = styled.span`\r\n  border: 1px solid #c1c1c1;\r\n  padding: 5px 10px;\r\n  border-radius: 10px;\r\n  font-size: 14px;\r\n  color: #606060;\r\n  cursor: pointer;\r\n  &:hover {\r\n    background-color: #eeeeee;\r\n  }\r\n  margin-right: 10px;\r\n`;\r\n\r\nconst Button = ({ onClick, children }) => {\r\n  return <StyledButton onClick={onClick}>{children}</StyledButton>;\r\n};\r\n\r\nexport default Button;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Button from \"./Button\";\r\n\r\nconst ModalBackground = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  display: ${props => (!props.open ? `none` : \"flex\")};\r\n  justify-content: center;\r\n  align-items: center;\r\n  background: rgba(0, 0, 0, 0.5);\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nconst ModalContents = styled.div`\r\n  position: absolute;\r\n  background-color: white;\r\n  border-radius: 10px;\r\n  padding: 20px;\r\n`;\r\n\r\nconst Modal = ({ open, closeModal }) => {\r\n  return (\r\n    <>\r\n      <ModalBackground open={open}>\r\n        <ModalContents>\r\n          <h4>0 상하좌우 숫자를 누르면 위치가 바뀝니다.</h4>\r\n          <table>\r\n            <tbody>\r\n              <tr>\r\n                <td>1</td>\r\n                <td>2</td>\r\n                <td>3</td>\r\n              </tr>\r\n              <tr>\r\n                <td>4</td>\r\n                <td>5</td>\r\n                <td>6</td>\r\n              </tr>\r\n              <tr>\r\n                <td>7</td>\r\n                <td>8</td>\r\n                <td>0</td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n          <h4>모양을 만들면 Game Clear!</h4>\r\n          <div style={{ textAlign: \"right\" }}>\r\n            <Button onClick={closeModal}>닫기</Button>\r\n          </div>\r\n        </ModalContents>\r\n      </ModalBackground>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport Tr from \"./components/Tr\";\r\nimport Modal from \"./components/Modal\";\r\nimport styled from \"styled-components\";\r\nimport Button from \"./components/Button\";\r\n\r\n//20200315, ldh, styled-components 사용 css 변경\r\nconst StyledTable = styled.table`\r\n  border: 1px solid;\r\n  border-collapse: collapse;\r\n`;\r\n\r\nconst StyledDiv = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  height: 100%;\r\n`;\r\n\r\nlet timer;\r\nconst App = () => {\r\n  const [array, setArray] = useState(\r\n    new Array(3).fill(null).map(() => [0, 0, 0])\r\n  );\r\n  const [isStart, setIsStart] = useState(false);\r\n  const [open, setOpen] = useState(true);\r\n  const timerRef = useRef();\r\n\r\n  //모달 열기\r\n  const openModal = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  //상하좌우에 0 있는지 확인하고 위치 변경\r\n  const onClick = (num, row, col) => {\r\n    const maxRow = 2,\r\n      maxCol = 2,\r\n      newArr = array.slice();\r\n\r\n    if (num === 0) {\r\n      return;\r\n    }\r\n\r\n    //위\r\n    if (row - 1 >= 0 && newArr[row - 1][col] === 0) {\r\n      newArr[row][col] = 0;\r\n      newArr[row - 1][col] = num;\r\n      setArray(newArr);\r\n    }\r\n\r\n    //오른쪽\r\n    if (col + 1 <= maxCol && newArr[row][col + 1] === 0) {\r\n      newArr[row][col] = 0;\r\n      newArr[row][col + 1] = num;\r\n      setArray(newArr);\r\n    }\r\n\r\n    //아래\r\n    if (row + 1 <= maxRow && newArr[row + 1][col] === 0) {\r\n      newArr[row][col] = 0;\r\n      newArr[row + 1][col] = num;\r\n      setArray(newArr);\r\n    }\r\n\r\n    //왼쪽\r\n    if (col - 1 >= 0 && newArr[row][col - 1] === 0) {\r\n      newArr[row][col] = 0;\r\n      newArr[row][col - 1] = num;\r\n      setArray(newArr);\r\n    }\r\n\r\n    isClear();\r\n  };\r\n\r\n  //정답 확인\r\n  const isClear = () => {\r\n    if (array.join() === \"1,2,3,4,5,6,7,8,0\") {\r\n      clearInterval(timer);\r\n      setIsStart(false);\r\n      alert(\"Game Clear!!!\");\r\n    }\r\n  };\r\n\r\n  //<tr> 렌더링\r\n  const renderTr = () => {\r\n    return array.map((value, index) => (\r\n      <Tr key={index} rowNum={index} value={value} onClick={onClick}></Tr>\r\n    ));\r\n  };\r\n\r\n  //게임 시작\r\n  const start = () => {\r\n    if (end) {\r\n      setArray(init());\r\n      setIsStart(true);\r\n\r\n      //시작 시간\r\n      const startTime = new Date().getTime();\r\n\r\n      const getElapsedTime = () => {\r\n        //현재 시간\r\n        const nowTime = new Date().getTime();\r\n        const newTime = new Date(nowTime - startTime);\r\n\r\n        const minute = newTime.getMinutes();\r\n        const second = newTime.getSeconds();\r\n\r\n        //1자리면 앞에 0 추가\r\n        const addZero = num => {\r\n          return num < 10 ? \"0\" + num : num;\r\n        };\r\n\r\n        timerRef.current.innerText = addZero(minute) + \":\" + addZero(second);\r\n      };\r\n\r\n      //setInterval만 쓰면 1초 후에 처음 시작되기 때문에, 함수 한번 실행하고 setInterval\r\n      getElapsedTime();\r\n      timer = setInterval(getElapsedTime, 1000);\r\n    }\r\n  };\r\n\r\n  //게임 종료\r\n  const end = () => {\r\n    clearInterval(timer);\r\n    setIsStart(false);\r\n    timerRef.current.innerText = \"00:00\";\r\n    setArray([\r\n      [0, 0, 0],\r\n      [0, 0, 0],\r\n      [0, 0, 0]\r\n    ]);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal open={open} closeModal={closeModal} />\r\n      <StyledDiv>\r\n        <StyledTable>\r\n          <tbody>{renderTr()}</tbody>\r\n        </StyledTable>\r\n        <h2 ref={timerRef}>00:00</h2>\r\n        <div>\r\n          <Button onClick={openModal}>게임방법</Button>\r\n          {!isStart ? (\r\n            <Button onClick={start}>게임시작</Button>\r\n          ) : (\r\n            <Button onClick={end}>게임종료</Button>\r\n          )}\r\n        </div>\r\n      </StyledDiv>\r\n    </>\r\n  );\r\n};\r\n\r\n//랜덤 숫자 배열로 3*3 배열 생성\r\nconst init = () => {\r\n  const randomNumArr = getRandomNumArr();\r\n  const newArr = new Array(3).fill(null).map(() => {\r\n    return randomNumArr.splice(0, 3);\r\n  });\r\n\r\n  return newArr;\r\n};\r\n\r\n//0~8 랜덤 숫자 배열 구하기\r\nconst getRandomNumArr = () => {\r\n  const randomNumArr = [];\r\n  let i = 0;\r\n  while (i < 9) {\r\n    const randomNum = Math.floor(Math.random() * 9);\r\n    if (!isExist(randomNum, randomNumArr)) {\r\n      randomNumArr.push(randomNum);\r\n      i++;\r\n    }\r\n  }\r\n  return randomNumArr;\r\n};\r\n\r\n//배열의 숫자 중복 확인\r\nconst isExist = (number, arr) => {\r\n  return arr.filter(value => value === number).length > 0 ? true : false;\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}