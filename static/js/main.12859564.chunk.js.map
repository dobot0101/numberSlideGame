{"version":3,"sources":["App.js","Td.js","Tr.js","serviceWorker.js","index.js"],"names":["timer","Td","rowNum","cellNum","value","onClick","tdRef","useRef","className","ref","onMouseEnter","current","style","backgroundColor","onMouseLeave","event","Tr","arr","map","index","key","isExist","number","filter","length","init","randomNumArr","i","randomNum","Math","floor","random","push","getRandomNumArr","Array","fill","pop","App","useState","array","setArray","isStart","setIsStart","timerRef","e","row","col","currentNum","nativeEvent","target","innerText","newArr","slice","join","clearInterval","alert","end","getTime","date","Date","hour","getHours","minute","getMinutes","second","getSeconds","addZero","num","setInterval","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.12859564.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\nimport './App.css'\nimport Tr from './Tr'\n\n//0~8 랜덤 숫자 배열 구하기\nconst getRandomNumArr = () => {\n  const randomNumArr = [];\n  let i = 0;\n  while (i < 9) {\n    const randomNum = Math.floor(Math.random() * 9);\n    if (!isExist(randomNum, randomNumArr)) {\n      randomNumArr.push(randomNum);\n      i++;\n    }\n  }\n  return randomNumArr;\n}\n\n//배열의 숫자 중복 확인\nconst isExist = (number, arr) => {\n  return arr.filter(value => value === number).length > 0 ? true : false;\n}\n\n//랜덤 숫자 배열로 3*3 배열 생성\nconst init = () => {\n  const randomNumArr = getRandomNumArr();\n  const newArr = new Array(3).fill(null).map(() => {\n    return [randomNumArr.pop(), randomNumArr.pop(), randomNumArr.pop()];\n  });\n\n  return newArr;\n}\n\nlet timer;\n\nconst App = () => {\n  const [array, setArray] = useState(new Array(3).fill(null).map(() => [0, 0, 0]));\n  const [isStart, setIsStart] = useState(false);\n  const timerRef = useRef();\n\n  //up, right, down, left 순으로 확인\n  const onClick = (e, row, col) => {\n    const currentNum = e.nativeEvent.target.innerText;\n    const maxRow = 2;\n    const maxCol = 2;\n    const newArr = array.slice();\n    let isChanged = false;\n\n    if (currentNum === 0) {\n      return;\n    }\n\n    //위\n    if (!isChanged && row - 1 >= 0 && newArr[row - 1][col] === 0) {\n      newArr[row][col] = 0;\n      newArr[row - 1][col] = currentNum;\n      setArray(newArr);\n    }\n\n    //오른쪽\n    if (!isChanged && col + 1 <= maxCol && newArr[row][col + 1] === 0) {\n      newArr[row][col] = 0;\n      newArr[row][col + 1] = currentNum;\n      setArray(newArr);\n    }\n\n    //아래\n    if (!isChanged && row + 1 <= maxRow && newArr[row + 1][col] === 0) {\n      newArr[row][col] = 0;\n      newArr[row + 1][col] = currentNum;\n      setArray(newArr);\n    }\n\n    //왼쪽\n    if (!isChanged && col - 1 >= 0 && newArr[row][col - 1] === 0) {\n      newArr[row][col] = 0;\n      newArr[row][col - 1] = currentNum;\n      setArray(newArr);\n    }\n\n    //정답 확인\n    if (array.join() === '1,2,3,4,5,6,7,8,0') {\n      clearInterval(timer);\n      setIsStart(false);\n      alert('Game Clear!!!');\n    }\n  }\n\n  //<tr> 렌더링\n  const renderTr = () => {\n    return array.map((value, index) => <Tr key={index} rowNum={index} value={value} onClick={onClick}></Tr >);\n  }\n\n  //게임 시작\n  const start = () => {\n    if (end) {\n      setArray(init());\n      setIsStart(true);\n\n      const getTime = () => {\n        const date = new Date();\n        const hour = date.getHours();\n        const minute = date.getMinutes();\n        const second = date.getSeconds();\n\n        const addZero = (num) => {\n          return num < 10 ? \"0\" + num : num;\n        }\n\n        timerRef.current.innerText = addZero(hour) + \":\" + addZero(minute) + \":\" + addZero(second);\n      }\n\n      getTime();\n      timer = setInterval(getTime, 1000);\n    }\n  }\n\n  //게임 종료\n  const end = () => {\n    clearInterval(timer);\n    setIsStart(false);\n    timerRef.current.innerText = '00:00:00';\n    setArray([[0, 0, 0], [0, 0, 0], [0, 0, 0]]);\n  }\n\n  return <div>\n    <table className=\"slide_table\">\n      <tbody>\n        {renderTr()}\n      </tbody>\n    </table>\n    <h2 ref={timerRef}>00:00:00</h2>\n    {!isStart ? <button onClick={start}>게임 시작</button> : <button onClick={end}>게임 종료</button>}\n  </div>;\n}\n\nexport default App;\n","import React, { useRef } from 'react';\r\n\r\nconst Td = ({ rowNum, cellNum, value, onClick }) => {\r\n\r\n    const tdRef = useRef();\r\n\r\n    const onMouseEnter = () => {\r\n        tdRef.current.style.backgroundColor = '#e0e0e0';\r\n    }\r\n\r\n    const onMouseLeave = () => {\r\n        tdRef.current.style.backgroundColor = 'white';\r\n    }\r\n\r\n    return <td className=\"slide_td\"\r\n        ref={tdRef}\r\n        onMouseEnter={onMouseEnter}\r\n        onMouseLeave={onMouseLeave}\r\n        onClick={(event) => { onClick(event, rowNum, cellNum) }}> {value}\r\n    </td >\r\n}\r\n\r\nexport default Td;","import React from 'react';\r\nimport Td from './Td'\r\n\r\nconst Tr = ({ rowNum, value, onClick }) => {\r\n\r\n    const renderTd = (arr) => {\r\n        return <tr className=\"slide_tr\">{arr.map((value, index) => <Td key={index}\r\n            onClick={onClick}\r\n            rowNum={rowNum}\r\n            cellNum={index}\r\n            value={value} ></Td>)}</tr>;\r\n    }\r\n\r\n    return renderTd(value);\r\n}\r\n\r\nexport default Tr;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}