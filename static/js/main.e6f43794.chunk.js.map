{"version":3,"sources":["Td.js","Tr.js","App.js","serviceWorker.js","index.js"],"names":["StyledTd","styled","td","Td","rowNum","cellNum","value","onClick","tdRef","useRef","className","ref","onMouseEnter","current","style","backgroundColor","onMouseLeave","StyledTr","tr","Tr","map","index","key","timer","StyledTable","table","init","randomNumArr","getRandomNumArr","Array","fill","splice","i","randomNum","Math","floor","random","isExist","push","number","arr","filter","length","App","useState","array","setArray","isStart","setIsStart","timerRef","num","row","col","newArr","slice","isClear","join","clearInterval","alert","end","innerText","margin","startTime","Date","getTime","getElapsedTime","nowTime","newTime","minute","getMinutes","second","getSeconds","addZero","setInterval","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e6f43794.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledTd = styled.td`\r\n  border: 1px solid;\r\n  padding: 20px;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst Td = ({ rowNum, cellNum, value, onClick }) => {\r\n  const tdRef = useRef();\r\n\r\n  const onMouseEnter = () => {\r\n    tdRef.current.style.backgroundColor = \"#e0e0e0\";\r\n  };\r\n\r\n  const onMouseLeave = () => {\r\n    tdRef.current.style.backgroundColor = \"white\";\r\n  };\r\n\r\n  const clickHandler = () => {\r\n    onClick(value, rowNum, cellNum);\r\n  };\r\n\r\n  return (\r\n    <StyledTd\r\n      className=\"slide_td\"\r\n      ref={tdRef}\r\n      onMouseEnter={onMouseEnter}\r\n      onMouseLeave={onMouseLeave}\r\n      onClick={clickHandler}\r\n    >\r\n      {value}\r\n    </StyledTd>\r\n  );\r\n};\r\n\r\nexport default Td;\r\n","import React from \"react\";\r\nimport Td from \"./Td\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledTr = styled.tr`\r\n  border: 1px solid;\r\n  padding: 20px;\r\n`;\r\n\r\nconst Tr = ({ rowNum, value, onClick }) => {\r\n  const renderTd = arr => {\r\n    return arr.map((value, index) => (\r\n      <Td\r\n        key={index}\r\n        onClick={onClick}\r\n        rowNum={rowNum}\r\n        cellNum={index}\r\n        value={value}\r\n      ></Td>\r\n    ));\r\n  };\r\n\r\n  return <StyledTr className=\"slide_tr\">{renderTd(value)}</StyledTr>;\r\n};\r\n\r\nexport default Tr;\r\n","import React, { useState, useRef } from \"react\";\nimport \"./App.css\";\nimport Tr from \"./Tr\";\nimport styled from \"styled-components\";\n\n//20200315, ldh, styled-components 사용 css 변경\nconst StyledTable = styled.table`\n  border: 1px solid;\n  border-collapse: collapse;\n`;\n\nlet timer;\nconst App = () => {\n  const [array, setArray] = useState(\n    new Array(3).fill(null).map(() => [0, 0, 0])\n  );\n  const [isStart, setIsStart] = useState(false);\n  const timerRef = useRef();\n\n  //up, right, down, left 순으로 확인\n  const onClick = (num, row, col) => {\n    const maxRow = 2,\n      maxCol = 2,\n      newArr = array.slice();\n\n    if (num === 0) {\n      return;\n    }\n\n    //위\n    if (row - 1 >= 0 && newArr[row - 1][col] === 0) {\n      newArr[row][col] = 0;\n      newArr[row - 1][col] = num;\n      setArray(newArr);\n    }\n\n    //오른쪽\n    if (col + 1 <= maxCol && newArr[row][col + 1] === 0) {\n      newArr[row][col] = 0;\n      newArr[row][col + 1] = num;\n      setArray(newArr);\n    }\n\n    //아래\n    if (row + 1 <= maxRow && newArr[row + 1][col] === 0) {\n      newArr[row][col] = 0;\n      newArr[row + 1][col] = num;\n      setArray(newArr);\n    }\n\n    //왼쪽\n    if (col - 1 >= 0 && newArr[row][col - 1] === 0) {\n      newArr[row][col] = 0;\n      newArr[row][col - 1] = num;\n      setArray(newArr);\n    }\n\n    //정답 확인\n    isClear();\n  };\n\n  //정답 확인\n  const isClear = () => {\n    if (array.join() === \"1,2,3,4,5,6,7,8,0\") {\n      clearInterval(timer);\n      setIsStart(false);\n      alert(\"Game Clear!!!\");\n    }\n  };\n\n  //<tr> 렌더링\n  const renderTr = () => {\n    return array.map((value, index) => (\n      <Tr key={index} rowNum={index} value={value} onClick={onClick}></Tr>\n    ));\n  };\n\n  //게임 시작\n  const start = () => {\n    if (end) {\n      setArray(init());\n      setIsStart(true);\n\n      //시작 시간\n      const startTime = new Date().getTime();\n\n      const getElapsedTime = () => {\n        //현재 시간\n        const nowTime = new Date().getTime();\n        const newTime = new Date(nowTime - startTime);\n\n        const minute = newTime.getMinutes();\n        const second = newTime.getSeconds();\n\n        //1자리면 앞에 0 추가\n        const addZero = num => {\n          return num < 10 ? \"0\" + num : num;\n        };\n\n        timerRef.current.innerText = addZero(minute) + \":\" + addZero(second);\n      };\n\n      //setInterval만 쓰면 1초 후에 처음 시작되기 때문에, 함수 한번 실행하고 setInterval\n      getElapsedTime();\n      timer = setInterval(getElapsedTime, 1000);\n    }\n  };\n\n  //게임 종료\n  const end = () => {\n    clearInterval(timer);\n    setIsStart(false);\n    timerRef.current.innerText = \"00:00\";\n    setArray([\n      [0, 0, 0],\n      [0, 0, 0],\n      [0, 0, 0]\n    ]);\n  };\n\n  return (\n    <div>\n      {/* 게임 설명 추가 */}\n      <div>\n        <h3 style={{ margin: 0 }}>{\"<게임 설명>\"}</h3>\n        0 주변 숫자를 누르면 위치가 바뀝니다.\n        <br />\n        <table>\n          <tr>\n            <td>1</td>\n            <td>2</td>\n            <td>3</td>\n          </tr>\n          <tr>\n            <td>4</td>\n            <td>5</td>\n            <td>6</td>\n          </tr>\n          <tr>\n            <td>7</td>\n            <td>8</td>\n            <td>0</td>\n          </tr>\n        </table>\n        {/* 1 2 3<br />\n        4 5 6<br />\n        7 8 0<br /> */}\n        모양을 만들면 Game Clear\n      </div>\n      <br />\n      <StyledTable>\n        <tbody>{renderTr()}</tbody>\n      </StyledTable>\n      <h2 ref={timerRef}>00:00</h2>\n      {!isStart ? (\n        <button onClick={start}>게임 시작</button>\n      ) : (\n        <button onClick={end}>게임 종료</button>\n      )}\n    </div>\n  );\n};\n\n//랜덤 숫자 배열로 3*3 배열 생성\nconst init = () => {\n  const randomNumArr = getRandomNumArr();\n  const newArr = new Array(3).fill(null).map(() => {\n    return randomNumArr.splice(0, 3);\n  });\n\n  return newArr;\n};\n\n//0~8 랜덤 숫자 배열 구하기\nconst getRandomNumArr = () => {\n  const randomNumArr = [];\n  let i = 0;\n  while (i < 9) {\n    const randomNum = Math.floor(Math.random() * 9);\n    if (!isExist(randomNum, randomNumArr)) {\n      randomNumArr.push(randomNum);\n      i++;\n    }\n  }\n  return randomNumArr;\n};\n\n//배열의 숫자 중복 확인\nconst isExist = (number, arr) => {\n  return arr.filter(value => value === number).length > 0 ? true : false;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}